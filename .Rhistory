kuenm_mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval,
batch = batch_fin, rep.n = rep_n, rep.type = rep_type,
jackknife = jackknife, out.dir = mod_dir, out.format = out_format,
project = project, G.var.dir = G_var_dir, ext.type = ext_type,
write.mess = write_mess, write.clamp = write_clamp,
maxent.path = maxent_path, args = args, wait = wait1, run = run1)
setwd("C:/Working_Dir")
occ_ind <- "Archeological_Data_Wendt_IndTest_June6.csv"
replicates <- TRUE
out_feval <- "Final_Models_evaluation_3"
fin_eval <- kuenm_feval(path = "Final_Models_2", occ.joint = "Bison_Projected_Presence.csv",
occ.ind = "Archeological_Data_Wendt_IndTest_June6.csv",
replicates = TRUE, out.eval = "Final_Mods_Eval_3",
threshold = threshold, rand.percent = 50,
iterations = 500, parallel.proc=TRUE)
library(kuenm)
fin_eval <- kuenm_feval(path = "Final_Models_2", occ.joint = "Bison_Projected_Presence.csv",
occ.ind = "Archeological_Data_Wendt_IndTest_June6.csv",
replicates = TRUE, out.eval = "Final_Mods_Eval_3",
threshold = threshold, rand.percent = 50,
iterations = 500, parallel.proc=TRUE)
fin_eval <- kuenm_feval(path = "Final_Models_2", occ.joint = "Bison_Projected_Presence.csv",
occ.ind = "Archeological_Data_Wendt_IndTest_June6.csv",
replicates = TRUE, out.eval = "Final_Mods_Eval_3",
threshold = threshold, rand.percent = 50,
iterations = 5, parallel.proc=TRUE)
library(tidyverse)
library(raster) # reading in raster files
library(sf) # for reading in shapefiles
library(lme4)
library(sp)
library(ggplot2)
library(ordinal)
setwd("C:/Working_Dir")
JObs.df = read.csv("Journal_Obs_Final_June7_JJF.csv") %>% # read in CSV
dplyr::select(-c("Remarks", "Remark2", "Remarks3")) %>%
mutate(BIBI_Ab = BIBI.herd+ BIBI.sign+ BIBI.kill,
BIBI_Pres=  ifelse(BIBI_Ab > 0, 1, 0),
Others_Pres = ifelse(Others > 0, 1, 0),
BIBI_Ab_categories =  cut(BIBI_Ab, breaks = c(-1,0,5,10,15, Inf)),
Others_categories = cut(Others, breaks = c(-1,0,3,20)), # categories for human abundance
Wolf_Ab = CALU.sign + CALU.pack + CALU.kill,
Wolf_Cat = cut(Wolf_Ab, breaks = c(-1, 0, 5, 10, 15, Inf)), #categories for wolf abundance
Griz_Ab = URAR.sign + URAR.kill + URAR.herd,
Griz_Cat = cut(Griz_Ab, breaks = c(-1, 0, 5, 10, 15, Inf))) %>% # categories for bear abundance
filter(Wdat != "nd",  Ldat !="nd")
#change CSV to simple feature
JObs.sf = st_as_sf(x = JObs.df,  coords = c("X", "Y"),
crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs" ) # set coords
hist(subset(JObs, Griz_Ab > 0)$Griz_Ab)
HSI_files <- list.files(path="C:/Working_Dir/Final_Models_2/M_0.1_F_lqp_Set_1/ASC", pattern="asc", all.files=FALSE, full.names=TRUE,recursive=TRUE)
HSI_stack <- stack(HSI_files)
Bison_HSI <- calc(HSI_stack, fun = mean)
HSI_files <- list.files(path="C:/Working_Dir/Final_Models_2/M_0.1_F_lqp_Set_1/ASC", pattern="asc", all.files=FALSE, full.names=TRUE,recursive=TRUE)
HSI_stack <- stack(HSI_files)
HSI_files <- list.files(path="C:/Working_Dir/Final_Models_3/M_0.1_F_lqp_Set_1/ASC", pattern="asc", all.files=FALSE, full.names=TRUE,recursive=TRUE)
HSI_stack <- stack(HSI_files)
HSI_files <- list.files(path="C:/Working_Dir/Final_Models_3/M_0.1_F_lqp_Set_1", pattern="asc", all.files=FALSE, full.names=TRUE,recursive=TRUE)
HSI_stack <- stack(HSI_files)
HSI_files <- list.files(path="C:/Working_Dir/Final_Models_2/M_0.1_F_lqp_Set_1", pattern="asc", all.files=FALSE, full.names=TRUE,recursive=TRUE)
HSI_stack <- stack(HSI_files)
HSI_files <- list.files(path="C:/Working_Dir/Final_Models_2/M_0.1_F_lqp_Set_1", pattern=".asc", all.files=FALSE, full.names=TRUE,recursive=TRUE)
HSI_stack <- stack(HSI_files)
Bison_HSI = raster("C:/Working_Dir/Final_Models_2/M_0.1_F_lqp_Set_1/Bison_avg.asc")
view(Bison_HSI)
plot(Bison_HSI)
crs(Bison_HSI) = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
plot(Bison_HSI)
Bison_HSI = raster("C:/Working_Dir/Final_Models_2/M_0.1_F_lqp_Set_1/Bison_avg.asc")
plot(Bison_HSI)
JObs.df = read.csv("Journal_Obs_Final_June7_JJF.csv") %>% # read in CSV
dplyr::select(-c("Remarks", "Remark2", "Remarks3")) %>%
mutate(BIBI_Ab = BIBI.herd+ BIBI.sign+ BIBI.kill,
BIBI_Pres=  ifelse(BIBI_Ab > 0, 1, 0),
Others_Pres = ifelse(Others > 0, 1, 0),
BIBI_Ab_categories =  cut(BIBI_Ab, breaks = c(-1,0,5,10,15, Inf)),
Others_categories = cut(Others, breaks = c(-1,0,3,20)), # categories for human abundance
Wolf_Ab = CALU.sign + CALU.pack + CALU.kill,
Wolf_Cat = cut(Wolf_Ab, breaks = c(-1, 0, 5, 10, 15, Inf)), #categories for wolf abundance
Griz_Ab = URAR.sign + URAR.kill + URAR.herd,
Griz_Cat = cut(Griz_Ab, breaks = c(-1, 0, 5, 10, 15, Inf))) %>% # categories for bear abundance
filter(Wdat != "nd",  Ldat !="nd")
#change CSV to simple feature
JObs.sf = st_as_sf(x = JObs.df,  coords = c("X", "Y"),
crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs" ) # set coords
plot(JObs.sf)
#change CSV to simple feature
JObs.sf = st_as_sf(x = JObs.df,  coords = c("X", "Y"),
crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs" ) # set coords
plot(JObs.sf)
plot(JObs.sf[BIBI_ab])
plot(JObs.sf[BIBI_Ab])
plot(JObs.sf[[BIBI_Ab]])
HSI_files <- list.files(path="C:/Working_Dir/Final_Models_2/M_0.1_F_lqp_Set_1", pattern=".asc", all.files=FALSE, full.names=TRUE,recursive=TRUE)
HSI_stack <- stack(HSI_files)
Bison_HSI <- calc(HSI_stack, fun = mean)
Bison_HSI = raster("C:/Working_Dir/Final_Models_2/M_0.1_F_lqp_Set_1/Bison_avg.asc")
crs(Bison_HSI)
crs(Bison_HSI) = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
View(Bison_HSI)
setwd("C:/Working_Dir")
JObs.df = read.csv("Journal_Obs_Final_June7_JJF.csv") %>% # read in CSV
dplyr::select(-c("Remarks", "Remark2", "Remarks3")) %>%
mutate(BIBI_Ab = BIBI.herd+ BIBI.sign+ BIBI.kill,
BIBI_Pres=  ifelse(BIBI_Ab > 0, 1, 0),
Others_Pres = ifelse(Others > 0, 1, 0),
BIBI_Ab_categories =  cut(BIBI_Ab, breaks = c(-1,0,5,10,15, Inf)),
Others_categories = cut(Others, breaks = c(-1,0,3,20)), # categories for human abundance
Wolf_Ab = CALU.sign + CALU.pack + CALU.kill,
Wolf_Cat = cut(Wolf_Ab, breaks = c(-1, 0, 5, 10, 15, Inf)), #categories for wolf abundance
Griz_Ab = URAR.sign + URAR.kill + URAR.herd,
Griz_Cat = cut(Griz_Ab, breaks = c(-1, 0, 5, 10, 15, Inf))) %>% # categories for bear abundance
filter(Wdat != "nd",  Ldat !="nd")
#change CSV to simple feature
JObs.sf = st_as_sf(x = JObs.df,  coords = c("X", "Y"),
crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs" ) # set coords
hist(subset(JObs, Griz_Ab > 0)$Griz_Ab)
# extract raster values to points
JObs.sf$bisonHSI = raster::extract(Bison_HSI, JObs.sf)
JObs.sf = subset(JObs.sf, bisonHSI != "NA")
JObs = data.frame(JObs.sf) %>% dplyr::select(-c("geometry"))
str(JObs)
JObs.mod.data = JObs %>%
na.omit(Wolf_Ab) %>%
mutate(Griz_Ab_scaled = scale(Griz_Ab), # center and scale continuous variables
Wolf_Ab_scaled = scale(Wolf_Ab),
Others_scaled = scale(Others),
bisonHSI_scaled = scale(bisonHSI),
BIBI_Ab_categories = as.ordered(factor(BIBI_Ab_categories,
labels=c("None", "Low", "Moderate", "High", "Very High")))) %>%
select(BIBI_Ab, BIBI_Pres, BIBI_Ab_categories,Observer, Griz_Ab_scaled, Wolf_Ab_scaled, Others_scaled, bisonHSI_scaled, Others_categories)
JObs.mod.data = JObs %>%
na.omit(Wolf_Ab) %>%
mutate(Griz_Ab_scaled = scale(Griz_Ab), # center and scale continuous variables
Wolf_Ab_scaled = scale(Wolf_Ab),
Others_scaled = scale(Others),
bisonHSI_scaled = scale(bisonHSI),
BIBI_Ab_categories = as.ordered(factor(BIBI_Ab_categories,
labels=c("None", "Low", "Moderate", "High", "Very High")))) %>%
dplyr::select(BIBI_Ab, BIBI_Pres, BIBI_Ab_categories,Observer, Griz_Ab_scaled, Wolf_Ab_scaled, Others_scaled, bisonHSI_scaled, Others_categories)
head(JObs.mod.data)
JObs.mod.data = JObs %>%
na.omit(Wolf_Ab) %>%
mutate(Griz_Ab_scaled = scale(Griz_Ab), # center and scale continuous variables
Wolf_Ab_scaled = scale(Wolf_Ab),
Others_scaled = scale(Others),
bisonHSI_scaled = scale(bisonHSI),
BIBI_Ab_categories = as.ordered(factor(BIBI_Ab_categories,
labels=c("None", "Low", "Moderate", "High", "Very High")))) %>%
dplyr::select(BIBI_Ab, BIBI_Pres, BIBI_Ab_categories,Observer, Griz_Ab_scaled, Wolf_Ab_scaled, Others_scaled, bisonHSI_scaled)
head(JObs.mod.data)
# abundance binned into four categories (0, 0-5, 5-10, 10-15, 15-213)
BIBI_Ab_categorical = clmm(BIBI_Ab_categories ~bisonHSI_scaled + Others_scaled + Griz_Ab_scaled + Wolf_Ab_scaled +   (1|Observer), data = JObs.mod.data)
install.packages("GGally")
str(JObs.mod.data)
head(JObs.mod.data)
# checking correlations between predictors
GGally::ggpairs(JObs.mod.data, columns=5:8 )
# checking correlations between predictors
GGally::ggpairs(JObs.mod.data)
, columns=5:8
# checking correlations between predictors
GGally::ggpairs(JObs.mod.data, columns=5:8 )
# checking correlations between predictors
GGally::ggpairs(JObs.mod.data, columns=c(1,2,5,6,7,8) )
install.packages("corrplot")
# checking correlations between predictors
Hmisc::rcorr(as.matrix(JObs.mod.data))
# checking correlations between predictors
Hmisc::rcorr(as.matrix(JObs.mod.data[,c("Griz_Ab_scaled", "Wolf_Ab_scaled", "Others_scaled","bisonHSI_scaled" )]))
# checking correlations between predictors
Hmisc::rcorr(as.matrix(JObs.mod.data[,c("Griz_Ab_scaled", "Wolf_Ab_scaled", "Others_scaled","bisonHSI_scaled" )]), method = "spearman")
# checking correlations between predictors
Hmisc::rcorr(as.matrix(JObs.mod.data[,c("Griz_Ab_scaled", "Wolf_Ab_scaled", "Others_scaled","bisonHSI_scaled" )]))
# checking correlations between predictors
cor = Hmisc::rcorr(as.matrix(JObs.mod.data[,c("Griz_Ab_scaled", "Wolf_Ab_scaled", "Others_scaled","bisonHSI_scaled" )]))
corrplot(cor)
corrplot::corrplot(cor)
# abundance binned into four categories (0, 0-5, 5-10, 10-15, 15-213)
BIBI_Ab_categorical = clmm(BIBI_Ab_categories ~bisonHSI_scaled + Others_scaled + Griz_Ab_scaled + Wolf_Ab_scaled +   (1|Observer), data = JObs.mod.data)
summary(BIBI_Ab_categorical)
# second, a logistic regression model.
# response variable = bison presence
# predictors = others (as categories from none:low:high), bison habitat suitability (scaled), and journalist & year as random effects
BIBI_Pres_mod = glmer(BIBI_Pres ~ bisonHSI_scaled + Others_scaled + Griz_Ab_scaled + Wolf_Ab_scaled +
(1|Observer), family = binomial(link = "logit"), data = JObs.mod.data)
summary(BIBI_Pres_mod)
BIBI_Ab_Numeric = glmer(BIBI_Ab ~ (1|Observer) +  bisonHSI_scaled + Others_scaled + Griz_Ab_scaled + Wolf_Ab_scaled,family = poisson, data = JObs.mod.data)
summary(BIBI_Ab_Numeric)
#BIBI_Ab_Numeric = glmer(BIBI_Ab ~ (1|Observer) +  bisonHSI_scaled + Others_scaled + Griz_Ab_scaled + Wolf_Ab_scaled, family = poisson, data = JObs.mod.data)
#summary(BIBI_Ab_Numeric)
fit_zipoisson <- glmmTMB::glmmTMB(BIBI_Ab ~ (1|Observer)  +  bisonHSI_scaled + Others_scaled + Griz_Ab_scaled + Wolf_Ab_scaled, data=JObs, ziformula=~(1|Observer)  +  bisonHSI_scaled + Others_scaled + Griz_Ab_scaled + Wolf_Ab_scaled, family=list(family="nbinom2",link="log"))
#BIBI_Ab_Numeric = glmer(BIBI_Ab ~ (1|Observer) +  bisonHSI_scaled + Others_scaled + Griz_Ab_scaled + Wolf_Ab_scaled, family = poisson, data = JObs.mod.data)
#summary(BIBI_Ab_Numeric)
fit_zipoisson <- glmmTMB::glmmTMB(BIBI_Ab ~ (1|Observer)  +  bisonHSI_scaled + Others_scaled + Griz_Ab_scaled + Wolf_Ab_scaled, data=JObs.mod.data, ziformula=~(1|Observer)  +  bisonHSI_scaled + Others_scaled + Griz_Ab_scaled + Wolf_Ab_scaled, family=list(family="nbinom2",link="log"))
#summary(BIBI_Ab_Numeric)
summary(fit_zipoisson)
# plot climate data
plot(Bison_HSI,
main = "Bison HSI",
axes = TRUE,
ext = extent(Bison_HSI))
plot(JObs.sf,
pch = 16, col = "black", size= 0.3,
# size the points according to the temp value
add = TRUE, axes = TRUE)
library(kuenm)
setwd("C:/Working_Dir")
occ_joint <- "Bison_Projected_Presence.csv"
occ_tra <- "Bison_Training_June6.csv"
M_var_dir <- "Env_Vars"
batch_cal <- "Candidate_models"
out_dir <- "Candidate_Models_2"
reg_mult <-c(seq(0.1, 1, 0.1), seq(2, 6, 1), 8, 10)
f_clas <- "lqp"
args <- NULL
maxent_path <- "C:/Program Files/maxent"
wait <- FALSE
run <- TRUE
occ_joint <- "Bison_Projected_Presence.csv"
occ_tra <- "Bison_Training_June6.csv"
M_var_dir <- "Env_Vars"
batch_cal <- "Candidate_models"
out_dir <- "Candidate_Models_July82022"
reg_mult <-c(seq(0.1, 1, 0.1), seq(2, 6, 1), 8, 10)
f_clas <- "lqp"
args <- NULL
maxent_path <- "C:/Program Files/maxent"
wait <- FALSE
run <- TRUE
kuenm_cal(occ.joint = occ_joint, occ.tra = occ_tra, M.var.dir = M_var_dir,
batch = batch_cal, out.dir = out_dir, reg.mult = reg_mult,
f.clas = f_clas, args = args, maxent.path = maxent_path,
wait = wait, run = run)
occ_test <- "Bison_Testing_June6.csv"
out_eval <- "Calibration_results_July82022"
threshold <- 5
rand_percent <- 50
iterations <- 500
kept <- TRUE
selection <- "OR_AICc"
cal_eval <- kuenm_ceval(path = out_dir, occ.joint = occ_joint, occ.tra = occ_tra,
occ.test = occ_test, batch = batch_cal, out.eval = out_eval,
threshold = threshold, rand.percent = rand_percent,
iterations = iterations, kept = kept, selection = selection)
mod_dir <- "Final_Models_July82022"
batch_fin <- "Final_models"
mod_dir <- "Final_Models_July82022"
rep_n <- 10
rep_type <- "Crossvalidate"
jackknife <- TRUE
out_format <- "logistic"
project <- FALSE
G_var_dir <- "Env_Vars"
ext_type <- "all"
write_mess <- FALSE
write_clamp <- FALSE
wait1 <- FALSE
run1 <- TRUE
args <- NULL
batch_fin <- "Final_models"
mod_dir <- "Final_Models_July82022"
rep_n <- 10
rep_type <- "Crossvalidate"
jackknife <- TRUE
out_format <- "logistic"
project <- FALSE
G_var_dir <- "Env_Vars"
ext_type <- "all"
write_mess <- FALSE
write_clamp <- FALSE
wait1 <- FALSE
run1 <- TRUE
args <- NULL
kuenm_mod(occ.joint = occ_joint, M.var.dir = M_var_dir, out.eval = out_eval,
batch = batch_fin, rep.n = rep_n, rep.type = rep_type,
jackknife = jackknife, out.dir = mod_dir, out.format = out_format,
project = project, G.var.dir = G_var_dir, ext.type = ext_type,
write.mess = write_mess, write.clamp = write_clamp,
maxent.path = maxent_path, args = args, wait = wait1, run = run1)
# looking at model outputs
summary(BIBI_Ab_categorical) # fitted values = UNKNOWN - consider using POLR
summary(BIBI_Pres_mod) # fitted value = probability of bison occurring
confint(BIBI_Ab_categorical)
coef(BIBI_Ab_categorical)
categorical_output =
conf_2.5 = confint(BIBI_Ab_categorical, level=0.95)[,1], # getting 2.5% confint
odds = coef(BIBI_Ab_categorical)[-c(1:4)], # getting coefficient
conf_97.5 = confint(BIBI_Ab_categorical, level=0.95)[,2], # getting 97.5 confint
variable = names(coef(BIBI_Ab_categorical))[-c(1:4)], # getting the variable name
AIC = as.factor(AIC(BIBI_Ab_categorical))) # aic for model
categorical_output = cbind(
conf_2.5 = confint(BIBI_Ab_categorical, level=0.95)[,1], # getting 2.5% confint
odds = coef(BIBI_Ab_categorical)[-c(1:4)], # getting coefficient
conf_97.5 = confint(BIBI_Ab_categorical, level=0.95)[,2], # getting 97.5 confint
variable = names(coef(BIBI_Ab_categorical))[-c(1:4)], # getting the variable name
AIC = as.factor(AIC(BIBI_Ab_categorical))) # aic for model
categorical_output = rbind(
conf_2.5 = confint(BIBI_Ab_categorical, level=0.95)[,1], # getting 2.5% confint
odds = coef(BIBI_Ab_categorical)[-c(1:4)], # getting coefficient
conf_97.5 = confint(BIBI_Ab_categorical, level=0.95)[,2], # getting 97.5 confint
variable = names(coef(BIBI_Ab_categorical))[-c(1:4)], # getting the variable name
AIC = as.factor(AIC(BIBI_Ab_categorical))) # aic for model
View(categorical_output)
categorical_output = cbind(
conf_2.5 = confint(BIBI_Ab_categorical, level=0.95)[,1], # getting 2.5% confint
odds = coef(BIBI_Ab_categorical)[-c(1:4)], # getting coefficient
conf_97.5 = confint(BIBI_Ab_categorical, level=0.95)[,2], # getting 97.5 confint
variable = names(coef(BIBI_Ab_categorical))[-c(1:4)], # getting the variable name
AIC = as.factor(AIC(BIBI_Ab_categorical))) # aic for model
categorical_output = data.frame(
conf_2.5 = confint(BIBI_Ab_categorical, level=0.95)[,1], # getting 2.5% confint
odds = coef(BIBI_Ab_categorical)[-c(1:4)], # getting coefficient
conf_97.5 = confint(BIBI_Ab_categorical, level=0.95)[,2], # getting 97.5 confint
variable = names(coef(BIBI_Ab_categorical))[-c(1:4)], # getting the variable name
AIC = as.factor(AIC(BIBI_Ab_categorical))) # aic for model
View(categorical_output)
categorical_output = data.frame(
conf_2.5 = confint(BIBI_Ab_categorical, level=0.95)[-c(1:4),1], # getting 2.5% confint
odds = coef(BIBI_Ab_categorical)[-c(1:4)], # getting coefficient
conf_97.5 = confint(BIBI_Ab_categorical, level=0.95)[,2], # getting 97.5 confint
variable = names(coef(BIBI_Ab_categorical))[-c(1:4)], # getting the variable name
AIC = as.factor(AIC(BIBI_Ab_categorical))) # aic for model
categorical_output = data.frame(
conf_2.5 = confint(BIBI_Ab_categorical, level=0.95)[,1], # getting 2.5% confint
odds = coef(BIBI_Ab_categorical), # getting coefficient
conf_97.5 = confint(BIBI_Ab_categorical, level=0.95)[,2], # getting 97.5 confint
variable = names(coef(BIBI_Ab_categorical)), # getting the variable name
AIC = as.factor(AIC(BIBI_Ab_categorical))) # aic for model
View(categorical_output)
categorical_output = data.frame(
conf_2.5 = confint(BIBI_Ab_categorical, level=0.95)[,1], # getting 2.5% confint
odds = coef(BIBI_Ab_categorical), # getting coefficient
conf_97.5 = confint(BIBI_Ab_categorical, level=0.95)[,2], # getting 97.5 confint
variable = names(coef(BIBI_Ab_categorical)), # getting the variable name
AIC = as.factor(AIC(BIBI_Ab_categorical)))[-c(1:4),] # aic for model
View(categorical_output)
categorical_output = data.frame(
conf_2.5 = confint(BIBI_Ab_categorical, level=0.95)[,1], # getting 2.5% confint
odds = coef(BIBI_Ab_categorical), # getting coefficient
conf_97.5 = confint(BIBI_Ab_categorical, level=0.95)[,2], # getting 97.5 confint
variable = c("Bison Habitat Suitability", "Human Abundance", "Grizzly Bear Abundance", "Wolf Abundance"), # getting the variable name
AIC = as.factor(AIC(BIBI_Ab_categorical)))[-c(1:4),] # aic for model
presence_output = data.frame(
conf_2.5 = confint(BIBI_Pres_mod, level=0.95)[,1], # getting 2.5% confint
odds = coef(BIBI_Pres_mod), # getting coefficient
conf_97.5 = confint(BIBI_Pres_mod, level=0.95)[,2], # getting 97.5 confint
variable = c("Bison Habitat Suitability", "Human Abundance",
"Grizzly Bear Abundance", "Wolf Abundance"), #  variable names
AIC = as.factor(AIC(BIBI_Pres_mod))) # aic for model
summary(BIBI_Pres_mod) # fitted value = probability of bison occurring
# second, a logistic regression model.
# response variable = bison presence
# predictors = others (as categories from none:low:high), bison habitat suitability (scaled), and journalist & year as random effects
BIBI_Pres_mod = glmer(BIBI_Pres ~ bisonHSI_scaled + Others_scaled + Griz_Ab_scaled + Wolf_Ab_scaled +
(1|Observer), family = binomial(link = "logit"), data = JObs.mod.data)
summary(BIBI_Pres_mod) # fitted value = probability of bison occurring
presence_output = data.frame(
conf_2.5 = confint(BIBI_Pres_mod, level=0.95)[,1], # getting 2.5% confint
odds = coef(BIBI_Pres_mod), # getting coefficient
conf_97.5 = confint(BIBI_Pres_mod, level=0.95)[,2], # getting 97.5 confint
variable = c("Bison Habitat Suitability", "Human Abundance",
"Grizzly Bear Abundance", "Wolf Abundance"), #  variable names
AIC = as.factor(AIC(BIBI_Pres_mod))) # aic for model
presence_output = data.frame(
conf_2.5 = confint(BIBI_Pres_mod, level=0.95, method = "Wald")[,1], # getting 2.5% confint
odds = fixef(BIBI_Pres_mod), # getting coefficient
conf_97.5 = confint(BIBI_Pres_mod, level=0.95, method = "Wald")[,2], # getting 97.5 confint
variable = c("Bison Habitat Suitability", "Human Abundance",
"Grizzly Bear Abundance", "Wolf Abundance"), #  variable names
AIC = as.factor(AIC(BIBI_Pres_mod))) # aic for model
confint(BIBI_Pres_mod, level=0.95, method = "Wald")[,1]
confint(BIBI_Pres_mod, level=0.95, method = "Wald")
confint(BIBI_Pres_mod, level=0.95, method = "Wald")[3:6,1]
fixef(BIBI_Pres_mod)
presence_output = data.frame(
conf_2.5 = confint(BIBI_Pres_mod, level=0.95, method = "Wald")[3:6,1], # getting 2.5% confint
odds = fixef(BIBI_Pres_mod)[2:5], # getting coefficient
conf_97.5 = confint(BIBI_Pres_mod, level=0.95, method = "Wald")[3:6,2], # getting 97.5 confint
variable = c("Bison Habitat Suitability", "Human Abundance",
"Grizzly Bear Abundance", "Wolf Abundance"), #  variable names
AIC = as.factor(AIC(BIBI_Pres_mod))) # aic for model
View(presence_output)
categorical_output = data.frame(
conf_2.5 = confint(BIBI_Ab_categorical, level=0.95)[,1], # getting 2.5% confint
odds = coef(BIBI_Ab_categorical), # getting coefficient
conf_97.5 = confint(BIBI_Ab_categorical, level=0.95)[,2], # getting 97.5 confint
variable = c("Bison Habitat Suitability", "Human Abundance",
"Grizzly Bear Abundance", "Wolf Abundance"), #  variable names
AIC = as.factor(AIC(BIBI_Ab_categorical)),  # aic for model
Mod = "Bison Abundance Model")[-c(1:4),]
presence_output = data.frame(
conf_2.5 = confint(BIBI_Pres_mod, level=0.95, method = "Wald")[3:6,1], # getting 2.5% confint
odds = fixef(BIBI_Pres_mod)[2:5], # getting coefficient
conf_97.5 = confint(BIBI_Pres_mod, level=0.95, method = "Wald")[3:6,2], # getting 97.5 confint
variable = c("Bison Habitat Suitability", "Human Abundance",
"Grizzly Bear Abundance", "Wolf Abundance"), #  variable names
AIC = as.factor(AIC(BIBI_Pres_mod)), # aic for model
Mod = "Bison Presence Model")
model_outputs = rbind(categorical_output, presence_output)
View(model_outputs)
head(model_outputs)
mod_output_plot =
ggplot(model_outputs, aes(y=odds, x=variable)) +
geom_point(position=position_dodge(0.6), size=3)+
ylab("\n Effect of Predictor on Bison Occurrence or Abundance  (95% CI)") + xlab("Predictor Variable") +
geom_errorbar(position = position_dodge(0.6), aes(x=variable, ymin=conf_2.5, ymax=conf_97.5), width = 0, size = 1) +
theme_bw()+
geom_hline(yintercept = 0, linetype="dashed") +
theme(axis.text=element_text(size=14), axis.title=element_text(size=16, face="bold"),
panel.grid = element_blank()) +
facet_wrap(~response, scales = "free_x") +
theme(strip.text = element_text(size = 16, face = "bold"),
strip.background = element_rect(fill= "white")) +
coord_flip()
mod_output_plot
mod_output_plot =
ggplot(model_outputs, aes(y=odds, x=variable)) +
geom_point(position=position_dodge(0.6), size=3)+
ylab("\n Effect of Predictor on Bison Occurrence or Abundance  (95% CI)") + xlab("Predictor Variable") +
geom_errorbar(position = position_dodge(0.6), aes(x=variable, ymin=conf_2.5, ymax=conf_97.5), width = 0, size = 1) +
theme_bw()+
geom_hline(yintercept = 0, linetype="dashed") +
theme(axis.text=element_text(size=14), axis.title=element_text(size=16, face="bold"),
panel.grid = element_blank()) +
facet_wrap(~Mod, scales = "free_x") +
theme(strip.text = element_text(size = 16, face = "bold"),
strip.background = element_rect(fill= "white")) +
coord_flip()
mod_output_plot
library(tidyverse)
library(raster) # reading in raster files
library(sf) # for reading in shapefiles
library(lme4)
library(sp)
library(ggplot2)
library(ordinal)
Bison_HSI = raster("C:/Working_Dir/Final_Models_2/M_0.1_F_lqp_Set_1/Bison_avg.asc")
crs(Bison_HSI) = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"
setwd("C:/Working_Dir")
JObs.df = read.csv("Journal_Obs_Final_June7_JJF.csv") %>% # read in CSV
dplyr::select(-c("Remarks", "Remark2", "Remarks3")) %>%
mutate(BIBI_Ab = BIBI.herd+ BIBI.sign+ BIBI.kill,
BIBI_Pres=  ifelse(BIBI_Ab > 0, 1, 0),
Others_Pres = ifelse(Others > 0, 1, 0),
BIBI_Ab_categories =  cut(BIBI_Ab, breaks = c(-1,0,5,10,15, Inf)),
Others_categories = cut(Others, breaks = c(-1,0,3,20)), # categories for human abundance
Wolf_Ab = CALU.sign + CALU.pack + CALU.kill,
Wolf_Cat = cut(Wolf_Ab, breaks = c(-1, 0, 5, 10, 15, Inf)), #categories for wolf abundance
Griz_Ab = URAR.sign + URAR.kill + URAR.herd,
Griz_Cat = cut(Griz_Ab, breaks = c(-1, 0, 5, 10, 15, Inf))) %>% # categories for bear abundance
filter(Wdat != "nd",  Ldat !="nd")
#change CSV to simple feature
JObs.sf = st_as_sf(x = JObs.df,  coords = c("X", "Y"),
crs = "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs" ) # set coords
# extract raster values to points
JObs.sf$bisonHSI = raster::extract(Bison_HSI, JObs.sf)
JObs.sf = subset(JObs.sf, bisonHSI != "NA")
JObs = data.frame(JObs.sf) %>% dplyr::select(-c("geometry"))
str(JObs)
JObs.mod.data = JObs %>%
na.omit(Wolf_Ab) %>%
mutate(Griz_Ab_scaled = scale(Griz_Ab), # center and scale continuous variables
Wolf_Ab_scaled = scale(Wolf_Ab),
Others_scaled = scale(Others),
bisonHSI_scaled = scale(bisonHSI),
BIBI_Ab_categories = as.ordered(factor(BIBI_Ab_categories,
labels=c("None", "Low", "Moderate", "High", "Very High")))) %>%
dplyr::select(BIBI_Ab, BIBI_Pres, BIBI_Ab_categories,Observer, Griz_Ab_scaled, Wolf_Ab_scaled, Others_scaled, bisonHSI_scaled)
# checking correlations between predictors, are any R values > 0.6?
cor = Hmisc::rcorr(as.matrix(JObs.mod.data[,c("Griz_Ab_scaled", "Wolf_Ab_scaled", "Others_scaled","bisonHSI_scaled" )]))
# checking correlations between predictors, are any R values > 0.6?
Hmisc::rcorr(as.matrix(JObs.mod.data[,c("Griz_Ab_scaled", "Wolf_Ab_scaled", "Others_scaled","bisonHSI_scaled" )]))
# bison presence/absence model
BIBI_Pres_mod = glmer(BIBI_Pres ~ bisonHSI_scaled*Others_scaled + Griz_Ab_scaled + Wolf_Ab_scaled +
(1|Observer), family = binomial(link = "logit"), data = JObs.mod.data)
# looking at model outputs
summary(BIBI_Pres_mod) # fitted value = probability of bison occurring
install.packages("performance")
performance::r2(BIBI_Pres_mod)
performance::check_collinearity(BIBI_Pres_mod)
performance::check_autocorrelation(BIBI_Pres_mod)
# bison presence/absence model
BIBI_Pres_mod = glmer(BIBI_Pres ~ bisonHSI_scaled + poly(Others_scaled,2) + Griz_Ab_scaled + Wolf_Ab_scaled +
(1|Observer), family = binomial(link = "logit"), data = JObs.mod.data)
# looking at model outputs
summary(BIBI_Pres_mod) # fitted value = probability of bison occurring
performance::r2(BIBI_Pres_mod)
# bison presence/absence model
BIBI_Pres_mod = glmer(BIBI_Pres ~ bisonHSI_scaled + Others_scaled + Griz_Ab_scaled + Wolf_Ab_scaled +
(1|Observer), family = binomial(link = "logit"), data = JObs.mod.data)
performance::r2(BIBI_Pres_mod)
tab_model(BIBI_Pres_mod)
sjplot::tab_model(BIBI_Pres_mod)
install.packages("sjPlot")
sjPlot::tab_model(BIBI_Pres_mod)
# looking at model outputs
summary(BIBI_Pres_mod)
BIBI_Pres_dredge = MuMIn::dredge(BIBI_Pres_mod)
# bison presence/absence model
BIBI_Pres_mod = glmer(BIBI_Pres ~ bisonHSI_scaled + Others_scaled + Griz_Ab_scaled + Wolf_Ab_scaled +
(1|Observer), family = binomial(link = "logit"), data = JObs.mod.data, na.action = "na.fail")
BIBI_Pres_dredge = MuMIn::dredge(BIBI_Pres_mod)
View(BIBI_Pres_dredge)
# calculate marginal and conditional R2 values to evaluate how much of the variation is explained by fixed/random effects
performance::r2(BIBI_Pres_mod)
# looking at model outputs
summary(BIBI_Pres_mod)
setwd("C:/Users/Jonathan Farr/Github/Historic_Bison")
setwd("C:/Users/Jonathan Farr/Github/Historic_Bison")
Bison_HSI = raster("C:/Users/Jonathan Farr/Github/Historic_Bison/Final_Models_July82022//M_0.1_F_lqp_Set_1/Bison_avg.asc")
setwd("C:/Users/Jonathan Farr/Github/Historic_Bison")
